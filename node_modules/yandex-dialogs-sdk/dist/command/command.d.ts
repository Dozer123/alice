import { IContext } from '../context';
import { IApiResponseBody } from '../api/response';
export declare type CommandCallbackResult = IApiResponseBody;
export declare type CommandCallback<TContext extends IContext = IContext> = ((context: TContext) => CommandCallbackResult) | ((context: TContext) => Promise<CommandCallbackResult>);
export declare type CommandMatcher<TContext extends IContext = IContext> = ((ctx: TContext) => boolean | number) | ((ctx: TContext) => Promise<boolean | number>);
export declare type CommandDeclaration<TContext extends IContext = IContext> = CommandMatcher<TContext> | string[] | string | RegExp;
export interface ICommand<TContext extends IContext = IContext> {
    run(context: TContext): Promise<CommandCallbackResult>;
    getRelevance(context: TContext): Promise<number>;
}
export declare class Command<TContext extends IContext = IContext> implements ICommand<TContext> {
    private readonly _callback;
    private readonly _matcher;
    constructor(matcher: CommandMatcher, callback: CommandCallback<TContext>);
    getRelevance(context: IContext): Promise<number>;
    run(context: TContext): Promise<CommandCallbackResult>;
    static createCommand<TContext extends IContext = IContext>(declaration: CommandDeclaration, callback: CommandCallback<TContext>): ICommand<TContext>;
    static createMatcherFromString(string: string): CommandMatcher;
    static createMatcherFromStrings(strings: string[]): CommandMatcher;
    static createMatcherFromRegExp(regexp: RegExp): CommandMatcher;
    static createMatcherAlways(): CommandMatcher;
    static createMatcherNever(): CommandMatcher;
}
