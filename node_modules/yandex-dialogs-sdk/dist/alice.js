"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const imagesApi_1 = require("./imagesApi");
const webhookServer_1 = require("./server/webhookServer");
const constants_1 = require("./constants");
const inMemorySessionStorage_1 = require("./session/inMemorySessionStorage");
const sessionMiddleware_1 = require("./session/sessionMiddleware");
const debug_1 = __importDefault(require("./debug"));
const mainScene_1 = require("./stage/mainScene");
class Alice {
    constructor(config = {}) {
        this._config = config;
        this.handleRequest = this.handleRequest.bind(this);
        this._middlewares = [];
        this._imagesApi = new imagesApi_1.ImagesApi(this._config);
        this._mainStage = new mainScene_1.MainStage();
        this._initMainStage();
    }
    _buildContext(request) {
        return {
            data: request,
            message: request.request.command,
            originalUtterance: request.request.original_utterance,
            sessionId: request.session.session_id,
            messageId: request.session.message_id,
            userId: request.session.user_id,
            payload: request.request.payload,
        };
    }
    _initMainStage(sessionsStorage = new inMemorySessionStorage_1.InMemorySessionStorage()) {
        this.use(sessionMiddleware_1.sessionMiddleware(sessionsStorage));
        this.use(this._mainStage.middleware);
    }
    async _runMiddlewares(context) {
        const middlewares = Array.from(this._middlewares);
        if (middlewares.length === 0) {
            return null;
        }
        let index = 0;
        const next = async (middlewareContext) => {
            const middleware = middlewares[index];
            index++;
            return middleware(middlewareContext, index >= middlewares.length ? null : next);
        };
        return next(context);
    }
    get imagesApi() {
        return this._imagesApi;
    }
    async handleRequest(data) {
        if (data.version !== constants_1.ALICE_PROTOCOL_VERSION) {
            throw new Error('Unknown protocol version');
        }
        debug_1.default(`incoming request: ${data.request.command}`);
        const context = this._buildContext(data);
        const result = await this._runMiddlewares(context);
        if (!result) {
            throw new Error('No response for request ' +
                `"${context.data.request.command}"` +
                '. Try add command for it or add default command.');
        }
        debug_1.default(`outcoming result: ${result.responseBody.text}`);
        return {
            response: result.responseBody,
            session: {
                message_id: data.session.message_id,
                session_id: data.session.session_id,
                user_id: data.session.user_id,
            },
            version: constants_1.ALICE_PROTOCOL_VERSION,
        };
    }
    listen(port = 80, webhookUrl = '/', options = {}) {
        const server = new webhookServer_1.WebhookServer({
            port: port,
            webhookUrl: webhookUrl,
            options: options,
            handleRequest: this.handleRequest,
        });
        server.start();
        return server;
    }
    use(middleware) {
        this._middlewares.push(middleware);
    }
    command(declaration, callback) {
        this._mainStage.scene.command(declaration, callback);
    }
    any(callback) {
        this._mainStage.scene.any(callback);
    }
    registerScene(scene) {
        this._mainStage.stage.addScene(scene);
    }
}
exports.Alice = Alice;
